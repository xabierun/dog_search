{
  "StatelessWidget": {
    "prefix": "snip StatelessWidget",
    "description": "StatelessWidgetのスニペット",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends StatelessWidget {",
      "  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container();",
      "  }",
      "}",
      ""
    ]
  },
  "StatefulWidget": {
    "prefix": "snip StatefulWidget",
    "description": "StatefulWidgetのスニペット",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "  class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends StatefulWidget {",
      "  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({super.key});",
      "",
      "  @override",
      "  State<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}> createState() => _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}State();",
      "}",
      "",
      "class _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}State extends State<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return SizedBox();",
      "  }  ",
      "}",
      ""
    ]
  },
  "ConsumerWidget": {
    "prefix": "snip ConsumerWidget",
    "description": "ConsumerWidgetのスニペット",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends ConsumerWidget {",
      "  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({super.key});",
      "  @override",
      "  Widget build(BuildContext context, WidgetRef ref) {",
      "    return SizedBox();",
      "  }",
      "}",
      ""
    ]
  },
  "ConsumerStatefulWidget": {
    "prefix": "snip ConsumerStatefulWidget",
    "description": "ConsumerStatefulWidgetのスニペット",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends ConsumerStatefulWidget {",
      "  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({super.key});",
      "",
      "  @override",
      "  ConsumerState<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}> createState() => _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}State();",
      "}",
      "",
      "class _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}State extends ConsumerState<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return SizedBox();",
      "  }",
      "}",
      ""
    ]
  },
  "response Dto": {
    "prefix": "snip Dto",
    "description": "Dtoのスニペット",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
      "  const factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({",
      "    required String data,",
      "  }) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      "",
      "  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}.fromJson(Map<String, dynamic> json) =>",
      "      _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}FromJson(json);",
      "}",
      ""
    ]
  },
  "datasouce": {
    "prefix": "snip datasource",
    "description": "datasourceのスニペット",
    "body": [
      "import 'package:dio/dio.dart';",
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "import 'package:retrofit/retrofit.dart';",
      "",
      "part '${TM_FILENAME_BASE}.g.dart';",

      "",
      "final ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/g}Provider =",
      "    Provider<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}>((ref) => ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(AppDio().dio));",
      "",
      "@RestApi()",
      "abstract interface class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
      "  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(Dio dio) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      "",
      "  @POST('/path')",
      "  Future<SampleResponseDto> fetch(@Body() Dto body);",
      "}",
      ""
    ]
  },
  "model": {
    "prefix": "snip model",
    "description": "modelのスニペット",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
      "  const factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({",
      "    required String data,",
      "  }) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      "",
      "  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}.fromDto(Dto dto) =>",
      "      ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(data: dto.data);",
      "}"
    ]
  },
  "entity": {
    "prefix": "snip entity",
    "description": "entityのスニペット",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
      "  const factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({",
      "    required String data,",
      "  }) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      "",
      "  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}.fromJson(Map<String, dynamic> json) =>",
      "      _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}FromJson(json);",
      "}",
      ""
    ]
  },
  "repository": {
    "prefix": "snip repository",
    "description": "repositoryのスニペット",
    "body": [
      "import 'package:dio/dio.dart';",
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "import 'package:fpdart/fpdart.dart';",
      "",
      "abstract interface class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
      "  Future<Either<ErrorModel, TemplateModel>> fetch(TemplateEntity entity);",
      "}",
      "",
    ]
  },
  "application": {
    "prefix": "snip usecase",
    "description": "applicationのスニペット",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "import 'package:fpdart/fpdart.dart';",
      "import 'package:riverpod_annotation/riverpod_annotation.dart';",
      "",
      "part 'image_search_usecase.g.dart';",
      "",
      "@riverpod",
      "${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/g}(Ref ref) =>",
      "    ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(ref.watch(templateRepositoryProvider));",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
      "  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(this._repository);",
      "",
      "  final TemplateRepository _repository;",
      "",
      "  Future<Either<ApiErrorModel, TemplateModel>> fetch(",
      "    int page,",
      "  ) async {",
      "    final param = TemplateEntity(page: page);",
      "",
      "    return _repository.fetch(param);",
      "  }",
      "}",

    ]
  },
  "provider": {
    "prefix": "snip provider",
    "description": "providerのスニペット",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "final ${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/camelcase}/g}StateProvider = NotifierProvider<${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/pascalcase}/g}Notifier, ${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/pascalcase}/g}State>(",
      "  ${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/pascalcase}/g}Notifier.new,",
      ");",
      "",
      "class ${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/pascalcase}/g}Notifier extends Notifier<${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/pascalcase}/g}State> {",
      "  ${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/pascalcase}/g}Notifier() : super();",
      "",
      "  @override",
      "  ${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/pascalcase}/g}State build() {",
      "    return const ${TM_DIRECTORY/^.+[\\/](.*)[\\/].*/${1:/pascalcase}/g}State();",
      "  }",
      "",
      "",
      "  Future<void> fetch() async {",
      "    final response = await _application.fetch();",
      "",
      "    response.fold(",
      "      (error) {",
      "        // エラーハンドリング",
      "      },",
      "      (response) async {",
      "        // 成功時の処理",
      "      },",
      "    );",
      "  }",
      "}",
      ""
    ]
  },
  "Enum": {
    "prefix": "snip enum",
    "description": "Enumのスニペット",
    "body": [
      "enum NoneEnum {",
      "  none('none');",
      "",
      "  const NoneEnum(this.value);",
      "",
      "  final String value;",
      "  ",
      "  static NoneEnum getByValue(String value) {",
      "    return NoneEnum.values.firstWhere(",
      "      (format) => format.value == value,",
      "      orElse: () => none,",
      "    );",
      "  }",
      "}",
      "",
    ]
  }
}
